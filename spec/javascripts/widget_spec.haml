- javascripts << 'rating_stars'

%div{:style => "margin-top:100px"} &nbsp;
%table
  %tr
    %td
      %div &nbsp; &nbsp;
    %td
      %div#holder

:javascript
  describe('Rating widget', {
    'before': function() {with(self){
      holder = $('holder');
      widget = new RatingStars.Widget({
        'holder': holder,
        'url': '/ajax/blank.haml'
      });
    }},
    
    'after': function() {with(self){
      widget = null;
      holder.update();
    }},
    
    "should calculate the length of the mask and it's left value based on cursor position": function() {with(self){
      var mask = widget.mask;
      expect(mask.getWidth()).should_be(0);
      expect(parseInt(mask.style.left)).should_be(0);
      
      widget._updateMask(40)
      expect(mask.getWidth()).should_be(64);
      expect(parseInt(mask.style.left)).should_be(40);
    }},
    
    'should calculate the percentage rating': function() {with(self){
      widget._updateRating(40)
      expect(widget.rating).should_be(36);
      
      widget._updateRating(67)
      expect(widget.rating).should_be(68);
      
      widget._updateRating(92)
      expect(widget.rating).should_be(98);
    }},
    
    'should display a message indicating if the rating has been submitted': function() {with(self){
      expect(widget.message).should_be('Click to submit');
      
      widget.rating = 58;
      widget._updateMessage();
      expect(widget.message).should_be('58% Rating');
      
      widget.submitted = true;
      widget._updateMessage();
      expect(widget.message).should_be('Thanks for voting! (58%)');
    }},
    
    'should not allow the rating to be updated once it has been submitted': function() {with(self){
      widget.rating = 90;
      widget.submitted = true;
      widget.onmousemove({clientX: holder.positionedOffset().left + 40});
      
      expect(widget.rating).should_not_be(36);
      expect(widget.rating).should_be(90);
    }},
    
    'should use the optional message provided': function() {with(self){
      widget.submitted = true;
      widget._updateMessage("Super duper!\n");
      expect(widget.message).should_be('Super duper!')
    }},
    
    'should submit the rating via ajax, and display the text given back by the response': function() {with(self){
      widget.url = '/ajax/response.haml'
      widget._finalize = function(response) {
        expect(response.responseText).should_be("Great job voting!!!\n")
      };
      widget.onclick({clientX: holder.positionedOffset().left + 40});
    }},
    
    'should set the mask width when a rating is passed in': function() {with(self){
      widget = null; holder.update();
      widget = new RatingStars.Widget({
        'holder': holder,
        'url': '/ajax/blank.haml',
        'rating': 30
      });
      
      mask = widget.mask;
      expect(mask.getWidth()).should_be(69)
      expect(parseInt(mask.style.left)).should_be(35)
    }},
    
    'should not update the widget when clicked if the read only option is true': function() {with(self){
      widget = null; holder.update();
      
      var oldOnClick = RatingStars.Widget.prototype.onclick;
      var clicked = false
      RatingStars.Widget.prototype.onclick = function(event) { clicked = true }
      
      widget = new RatingStars.Widget({
        'holder': holder,
        'url': '/ajax/blank.haml',
        'rating': 30,
        'readOnly': true
      });
      
      expect(widget.submitted).should_be(true);
      widget.widgetHolder.fireNative('click');
      expect(clicked).should_be(false);
      
      RatingStars.Widget.prototype.onclick = oldOnClick;
    }}
  });